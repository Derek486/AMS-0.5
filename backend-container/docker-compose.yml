services:
  worker.database:
    image: postgres:latest
    environment:
      - POSTGRES_DB=${PG_DB}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${PG_DB} -U ${PG_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  worker-ams:
    build: 
      context: .
      dockerfile: Worker-Ams/Dockerfile
    environment: 
      - POSTGRES_HOST=${PG_HOST}
      - POSTGRES_PORT=${PG_PORT}
      - POSTGRES_DB=${PG_DB}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - KAFKA_HOST=${KAFKA_HOST}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
    ports:
      - 8081:8080
    depends_on:
      worker.database:
        condition: service_healthy

  cAdvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cAdvisor
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
      
  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - cAdvisor

  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    restart: always
    depends_on:
      - prometheus
