version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    expose:
      - "2181"
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    expose:
      - "9092"
    depends_on:
      - zookeeper
    networks:
      - kafka-network
    healthcheck:
      test: kafka-cluster cluster-id --bootstrap-server kafka:9092
      interval: 30s
      timeout: 10s
      retries: 3

  proxy:
    image: nginx:alpine
    volumes:
      - ./front-cluster/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - '3000:80'
    depends_on:
      - app
      - app.flask
    networks:
      - front-network

  app:
    build:
      context: ./front-cluster/front-container
      args:
        - VITE_API_URL=http://localhost:8081
        - VITE_MODEL_HOST=localhost:4321
    volumes:
      - ./front-cluster/front-container/nginx.conf:/etc/nginx/conf.d/default.conf
    environment:
      - VITE_API_URL=http://localhost:8081
      - VITE_MODEL_HOST=localhost:4321
    depends_on:
      - "worker.dotnet"
    networks:
      - front-network
      - back-network

  app.flask:
    build: 
      context: ./front-cluster/front-flask-container
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=${KAFKA_TOPIC:-vibration-topic}
      - KAFKA_TOPIC_MODEL=${KAFKA_TOPIC_MODEL:-model-topic}
      - MOTORES_API_URL=http://worker.dotnet:8080
    volumes:
      - ./front-cluster/front-flask-container/templates:/usr/local/app/templates
      - ./front-cluster/front-flask-container/static:/usr/local/app/static
    depends_on:
      - "worker.dotnet"
      - "kafka"
    networks:
      - front-network
      - back-network
      - kafka-network
  
  worker.db:
    image: postgres:latest
    environment:
      - POSTGRES_DB=${PG_DB:-ams}
      - POSTGRES_USER=${PG_USER:-worker}
      - POSTGRES_PASSWORD=${PG_PASSWORD:-pass123456}
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${PG_DB:-ams} -U ${PG_USER:-worker}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - back-network

  worker.dotnet:
    build: 
      context: ./backend-container
      dockerfile: Worker-Ams/Dockerfile
    environment: 
      - POSTGRES_HOST=${PG_HOST:-worker.db}
      - POSTGRES_PORT=${PG_PORT:-5432}
      - POSTGRES_DB=${PG_DB:-ams}
      - POSTGRES_USER=${PG_USER:-worker}
      - POSTGRES_PASSWORD=${PG_PASSWORD:-pass123456}
      - KAFKA_HOST=kafka:9092
      - KAFKA_TOPIC=${KAFKA_TOPIC:-vibration-topic}
    ports:
      - "8081:8080"
    depends_on:
      worker.db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - back-network
      - kafka-network
  
  model:
    build: 
      context: ./model-cluster
    environment:
      - KAFKA_HOST=kafka:9092
      - KAFKA_TOPIC_MODEL=model-topic
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    ports:
      - "4321:4321"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - kafka-network
      - model-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    restart: always
    networks:
      - model-network
  
networks:
  kafka-network:
    driver: bridge
  back-network:
    driver: bridge
  front-network:
    driver: bridge
  model-network:
    driver: bridge